{"version":3,"sources":["components/Contacts/Contacts.module.css","api/api.js","redux/auth-reducer.js","components/Login/Login.js","redux/contacts-reducer.js","components/Contacts/Contact/ContactForm.js","components/Contacts/Contact/Contact.js","components/Contacts/Contacts.js","components/Contacts/ContactsContainer.js","components/Header/Header.js","components/Header/HeaderContainer.js","App.js","serviceWorker.js","redux/store.js","index.js","components/Header/Header.module.css"],"names":["module","exports","instance","axios","baseURL","withCredentials","headers","authApi","email","password","rememberMe","post","delete","initialState","isAuth","loginUser","type","authReducer","state","action","LoginReduxForm","reduxForm","form","props","onSubmit","handleSubmit","Field","placeholder","name","component","connect","auth","login","dispatch","then","response","console","log","data","resultCode","to","formData","contacts","id","phone","buttonActive","contactsReducer","newContact","length","map","contact","contactId","contactData","filter","active","ContactReduxForm","required","Contact","useState","editMode","setEditMode","initialValues","editContact","onClick","changeButtonsState","disabled","deleteContact","deleteSearchContact","Contacts","searchMode","setSearchMode","contactsForShow","setContactsForShow","onChange","event","searchText","target","value","toLowerCase","includes","findContacts","addContact","className","style","key","contactsPage","Header","header","logo","loginBlock","logout","App","path","render","from","Component","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,SAAW,6B,uPCCvBC,E,OAAWC,OAAa,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINC,EAAU,SACbC,EAAOC,GAA+B,IAArBC,EAAoB,wDACvC,OAAOR,EAASS,KAAT,aAA4B,CAACH,QAAOC,WAAUC,gBAFhDH,EAAU,WAKf,OAAOL,EAASU,OAAT,eCXXC,EAAe,CACfC,QAAQ,GAcCC,EAAY,SAACD,GAAD,MAAa,CAACE,KAjBzB,QAiBsCF,WAsBrCG,EAjCK,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCAElD,OAAQA,EAAOH,MACX,IATM,QAUF,OAAO,2BAAIE,GAAX,IAAkBJ,OAAQK,EAAOL,SAErC,QACI,OAAOI,I,QCObE,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,EAhBL,SAACE,GACf,OACI,0BAAMC,SAAUD,EAAME,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,YAAa,QAASC,KAAM,QAASC,UAAW,WAE3D,6BACI,kBAACH,EAAA,EAAD,CAAOC,YAAa,WAAYC,KAAM,WAAYC,UAAW,WAEjE,6BACI,8CA8BDC,eAJS,SAACZ,GAAD,MAAY,CAChCJ,OAAQI,EAAMa,KAAKjB,UAGiB,CAACkB,MDzBpB,SAACxB,EAAOC,GAAR,OAAqB,SAACwB,GACvC1B,EAAcC,EAAOC,GAChByB,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAASG,MACY,IAA7BH,EAASG,KAAKC,YACdN,EAASlB,GAAU,UCoBpBe,EAtBD,SAACP,GAMX,OAAIA,EAAMT,OACC,kBAAC,IAAD,CAAU0B,GAAI,cAIrB,6BACI,qCACA,kBAACpB,EAAD,CAAgBI,SAXP,SAACiB,GACdlB,EAAMS,MAAMS,EAASjC,MAAOiC,EAAShC,iB,SCtBzCI,EAAe,CACf6B,SAAU,CACN,CAACC,GAAI,EAAGf,KAAM,UAAWpB,MAAO,oBAAqBoC,MAAO,MAC5D,CAACD,GAAI,EAAGf,KAAM,OAAQpB,MAAO,iBAAkBoC,MAAO,MACtD,CAACD,GAAI,EAAGf,KAAM,OAAQpB,MAAO,iBAAkBoC,MAAO,MACtD,CAACD,GAAI,EAAGf,KAAM,QAASpB,MAAO,kBAAmBoC,MAAO,MACxD,CAACD,GAAI,EAAGf,KAAM,UAAWpB,MAAO,oBAAqBoC,MAAO,OAEhEC,cAAc,GAiDHC,EA9CS,WAAmC,IAAlC5B,EAAiC,uDAAzBL,EAAcM,EAAW,uCAEtD,OAAQA,EAAOH,MACX,IAnBY,cAoBR,IAAI+B,EAAa,CACbJ,GAAIzB,EAAMwB,SAASM,OAAS9B,EAAMwB,SAASxB,EAAMwB,SAASM,OAAO,GAAGL,GAAG,EAAI,EAC3Ef,KAAM,GACNpB,MAAO,GACPoC,MAAO,IAGX,OADA1B,EAAM2B,cAAe,EACd,2BACA3B,GADP,IACcwB,SAAS,GAAD,mBAAMxB,EAAMwB,UAAZ,CAAsBK,MAGhD,IA7Ba,eA+BT,OADA7B,EAAM2B,cAAe,EACd,2BACA3B,GADP,IACcwB,SAAUxB,EAAMwB,SAASO,KAAI,SAAUC,GAM7C,OALIA,EAAQP,KAAOxB,EAAOgC,YACtBD,EAAQtB,KAAOT,EAAOiC,YAAYxB,KAClCsB,EAAQ1C,MAAQW,EAAOiC,YAAY5C,MACnC0C,EAAQN,MAAQzB,EAAOiC,YAAYR,OAEhCM,OAInB,IA3Ce,iBA8CX,OAFAhC,EAAM2B,cAAe,EAEd,2BAAI3B,GAAX,IAAkBwB,SAAUxB,EAAMwB,SAASW,QAAO,SAAAH,GAAO,OAAIA,EAAQP,KAAOxB,EAAOgC,eAEvF,IA9CqB,uBA+CjB,OAAO,2BAAIjC,GAAX,IAAkB2B,aAAc1B,EAAOmC,SAE3C,QACI,OAAOpC,I,QC5BJqC,EAFUlC,YAAU,CAACC,KAAM,WAAjBD,EApBL,SAACE,GAEjB,OACI,0BAAMC,SAAUD,EAAME,cAClB,6BACI,yCAEJ,6BACI,kBAACC,EAAA,EAAD,CAAO8B,UAAU,EAAM7B,YAAa,OAAQC,KAAM,OAAQC,UAAW,WAEzE,6BACI,kBAACH,EAAA,EAAD,CAAOC,YAAa,QAASC,KAAM,QAASC,UAAW,WAE3D,6BACI,kBAACH,EAAA,EAAD,CAAOC,YAAa,QAASC,KAAM,QAASC,UAAW,eC6BxD4B,EA3CC,SAAClC,GAAW,IAAD,EAEOmC,oBAAS,GAFhB,mBAElBC,EAFkB,KAERC,EAFQ,KAmBvB,OACI,6BACKD,IAAapC,EAAM2B,QAAQtB,KACtB,6BACE,kBAAC,EAAD,CAAkBiC,cAAetC,EAAM2B,QACrB1B,SApBjB,SAACiB,GACdlB,EAAMuC,YAAYrB,EAAUlB,EAAM2B,QAAQP,IAC1CiB,GAAY,IAmBkBT,UAAW5B,EAAM2B,QAAQP,MAE7C,6BACE,6BACI,4BAAQoB,QAfP,WACjBH,GAAY,GACZrC,EAAMyC,oBAAmB,IAasBC,SAAU1C,EAAMsB,cAA/C,QACA,4BAAQkB,QArBN,WAClBxC,EAAM2C,cAAc3C,EAAM2B,QAAQP,IAClCpB,EAAM4C,oBAAoB5C,EAAM2B,QAAQP,KAmBQsB,SAAU1C,EAAMsB,cAAhD,WAEJ,6BACI,sCAAYtB,EAAM2B,QAAQtB,MAC1B,uCAAaL,EAAM2B,QAAQ1C,OAC3B,uCAAae,EAAM2B,QAAQN,W,kBCkBpCwB,EAnDE,SAAC7C,GAAW,IAAD,EAEYmC,oBAAS,GAFrB,mBAEjBW,EAFiB,KAELC,EAFK,OAGsBZ,mBAASnC,EAAMmB,UAHrC,mBAGjB6B,EAHiB,KAGAC,EAHA,KAKpBD,EAAgBvB,SAAWzB,EAAMmB,SAASM,QAAWqB,GACrDG,EAAmBjD,EAAMmB,UAG7B,IAAMyB,EAAsB,SAAChB,GACtBkB,GACCG,EAAmBD,EAAgBlB,QAAO,SAAAH,GAAO,OAAIA,EAAQP,KAAOQ,OAe5E,OAAK5B,EAAMT,OAKP,6BACI,yCACA,6BAAK,2BAAOmD,SAAU1C,EAAMsB,aAAc4B,SAAU,SAAAC,GAAK,OAlB5C,SAACA,GAClB,IAAIC,EAAaD,EAAME,OAAOC,MAC1BF,GACAH,EAAmBjD,EAAMmB,SAASW,QAAO,SAAAH,GAAO,OAAIA,EAAQtB,KAAKkD,cAAcC,SAASJ,EAAWG,mBACnGR,GAAc,KAEdE,EAAmBjD,EAAMmB,UACzB4B,GAAc,IAW+CU,CAAaN,IAAQ1D,KAAK,SAAvF,UACA,4BAAQ+C,QAASxC,EAAM0D,WAAYhB,SAAU1C,EAAMsB,cAAgBwB,GAAnE,eACA,yBAAKa,UAAWC,IAAMzC,WAChB6B,EAAgBvB,QAAUqB,EACtB,mDACAE,EAAgBtB,KAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,CAASA,QAASA,EACTkC,IAAKlC,EAAQP,GACbuB,cAAe3C,EAAM2C,cACrBJ,YAAavC,EAAMuC,YACnBjB,aAActB,EAAMsB,aACpBmB,mBAAoBzC,EAAMyC,mBAC1BG,oBAAqBA,SAjBpE,kBAAC,IAAD,CAAU3B,GAAI,YCNdV,eANO,SAACZ,GAAD,MAAY,CAC9BwB,SAAUxB,EAAMmE,aAAa3C,SAC7BG,aAAc3B,EAAMmE,aAAaxC,aACjC/B,OAAQI,EAAMa,KAAKjB,UAGiB,CACpCmE,WJ8BsB,iBAAO,CAACjE,KAzDd,gBI4BhB8C,YJ8BuB,SAACV,EAAaD,GAAd,MAA6B,CAACnC,KAxDpC,eAwDwDoC,cAAaD,cI7BtFe,cJ8ByB,SAACf,GAAD,MAAgB,CAACnC,KA1DvB,iBA0D6CmC,cI7BhEa,mBJ8B8B,SAACV,GAAD,MAAa,CAACtC,KAzDnB,uBAyD+CsC,YIlC7DxB,EArBW,SAACP,GAEvB,OACI,6BACI,kBAAC,EAAD,CAAUmB,SAAUnB,EAAMmB,SAChBuC,WAAY1D,EAAM0D,WAClBf,cAAe3C,EAAM2C,cACrBJ,YAAavC,EAAMuC,YACnBjB,aAActB,EAAMsB,aACpBmB,mBAAoBzC,EAAMyC,mBAC1BlD,OAAQS,EAAMT,a,iBCDrBwE,EAXA,SAAC/D,GACZ,OACI,yBAAK2D,UAAWC,IAAMI,QAClB,yBAAKL,UAAWC,IAAMK,MAAtB,iBACA,yBAAKN,UAAWC,IAAMM,YACjBlE,EAAMT,OAAS,4BAAQiD,QAASxC,EAAMmE,QAAvB,UAAiD,QCSlE5D,eAJS,SAACZ,GAAD,MAAY,CAChCJ,OAAQI,EAAMa,KAAKjB,UAGiB,CAAC4E,ORcnB,kBAAM,SAACzD,GACzB1B,IACK2B,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAASG,MACY,IAA7BH,EAASG,KAAKC,YACdN,EAASlB,GAAU,UQnBpBe,EAZS,SAACP,GACrB,OACI,6BACI,kBAAC,EAAD,CAAQT,OAAQS,EAAMT,OAAQ4E,OAAQnE,EAAMmE,aCiBzCC,E,uKAfP,OACI,yBAAKT,UAAU,eACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,uBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOU,KAAK,YAAYC,OAAQ,kBAAM,kBAAC,EAAD,SACtC,kBAAC,IAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,kBAAC,EAAD,SACnC,kBAAC,IAAD,CAAUC,KAAO,IAAItD,GAAK,qB,GAVhCuD,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qCCZFC,EAAWC,YAAgB,CAC3BjB,aAAcvC,EACdf,KAAMd,EACNK,KAAMiF,MAGJC,EAAmBP,OAAOQ,sCAAwCC,IACpEC,EAAQC,YAAYP,EAAUG,EAAiBK,YAAgBC,OAEnEb,OAAOc,UAAYJ,EAEJA,QCPXK,IAASnB,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUc,MAAOA,GACb,kBAAC,EAAD,QAEOM,SAASC,eAAe,SFoHzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnF,MAAK,SAAAoF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrF,QAAQqF,MAAMA,EAAMC,a,mBGxI5B1H,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,WAAa,8B","file":"static/js/main.8668be42.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"Contacts_contacts__ZDtBB\"};","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"6dc64a36-ec10-411f-b11d-c98c17f272e5\"\r\n    }\r\n})\r\n\r\nexport const authApi = {\r\n    login(email, password, rememberMe = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe});\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}\r\n","import {authApi} from \"../api/api\";\r\n\r\nconst LOGIN = 'LOGIN';\r\n\r\nlet initialState = {\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case LOGIN: {\r\n            return {...state, isAuth: action.isAuth}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const loginUser = (isAuth) => ({type: LOGIN, isAuth});\r\n\r\nexport const login = (email, password) => (dispatch) => {\r\n    authApi.login(email, password)\r\n        .then(response => {\r\n            console.log(response.data);\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(loginUser(true));\r\n            }\r\n        })\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    authApi.logout()\r\n        .then(response => {\r\n            console.log(response.data);\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(loginUser(false));\r\n            }\r\n        })\r\n}\r\n\r\nexport default authReducer;","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Email\"} name={\"email\"} component={\"input\"}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"password\"} name={\"password\"} component={\"input\"}/>\r\n            </div>\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm);\r\n\r\nconst Login = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password);\r\n    }\r\n\r\n    if (props.isAuth){\r\n        return <Redirect to={\"/contacts\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","const ADD_CONTACT = 'ADD-CONTACT';\r\nconst DELETE_CONTACT = 'DELETE-CONTACT';\r\nconst EDIT_CONTACT = 'EDIT-CONTACT';\r\nconst CHANGE_BUTTONS_STATE = 'CHANGE_BUTTONS_STATE';\r\n\r\nlet initialState = {\r\n    contacts: [\r\n        {id: 1, name: 'Cartman', email: 'cartman@gmail.com', phone: '01' },\r\n        {id: 2, name: 'Stan', email: 'stan@gmail.com', phone: '02'},\r\n        {id: 3, name: 'Kyle', email: 'kyle@gmail.com', phone: '03'},\r\n        {id: 4, name: 'Kenny', email: 'kenny@gmail.com', phone: '04'},\r\n        {id: 5, name: 'Batters', email: 'batters@gmail.com', phone: '05'}\r\n    ],\r\n    buttonActive: false\r\n}\r\n\r\nconst contactsReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_CONTACT: {\r\n            let newContact = {\r\n                id: state.contacts.length ? state.contacts[state.contacts.length-1].id+1 : 1,\r\n                name: \"\",\r\n                email: \"\",\r\n                phone: \"\"\r\n            };\r\n            state.buttonActive = true;\r\n            return {\r\n                ...state, contacts: [...state.contacts, newContact]\r\n            }\r\n        }\r\n        case EDIT_CONTACT: {\r\n            state.buttonActive = false;\r\n            return {\r\n                ...state, contacts: state.contacts.map(function (contact) {\r\n                    if (contact.id === action.contactId) {\r\n                        contact.name = action.contactData.name;\r\n                        contact.email = action.contactData.email;\r\n                        contact.phone = action.contactData.phone;\r\n                    }\r\n                    return contact;\r\n                })\r\n            }\r\n        }\r\n        case DELETE_CONTACT: {\r\n            state.buttonActive = false;\r\n\r\n            return {...state, contacts: state.contacts.filter(contact => contact.id !== action.contactId)}\r\n        }\r\n        case CHANGE_BUTTONS_STATE: {\r\n            return {...state, buttonActive: action.active}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addContact = () => ({type: ADD_CONTACT});\r\nexport const editContact = (contactData, contactId) => ({type: EDIT_CONTACT, contactData, contactId});\r\nexport const deleteContact = (contactId) => ({type: DELETE_CONTACT, contactId});\r\nexport const changeButtonsState = (active) => ({type: CHANGE_BUTTONS_STATE, active});\r\n\r\nexport default contactsReducer;","import {Field, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\n\r\nconst ContactForm = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n            <div>\r\n                <Field required={true} placeholder={\"name\"} name={\"name\"} component={\"input\"}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"email\"} name={\"email\"} component={\"input\"}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"phone\"} name={\"phone\"} component={\"input\"}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ContactReduxForm = reduxForm({form: \"contact\"})(ContactForm);\r\n\r\nexport default ContactReduxForm;","import React, {useState} from \"react\";\r\nimport ContactReduxForm from \"./ContactForm\";\r\n\r\nconst Contact = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    const onSubmit = (formData) => {\r\n        props.editContact(formData, props.contact.id);\r\n        setEditMode(false);\r\n    }\r\n\r\n    const deleteContact = () => {\r\n        props.deleteContact(props.contact.id);\r\n        props.deleteSearchContact(props.contact.id);\r\n    }\r\n\r\n    const goToEditMode = () => {\r\n        setEditMode(true);\r\n        props.changeButtonsState(true);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode || !props.contact.name\r\n                ? <div>\r\n                    <ContactReduxForm initialValues={props.contact}\r\n                                      onSubmit={onSubmit}\r\n                                      contactId={props.contact.id}/>\r\n                </div>\r\n                : <div>\r\n                    <div>\r\n                        <button onClick={goToEditMode} disabled={props.buttonActive}>Edit</button>\r\n                        <button onClick={deleteContact} disabled={props.buttonActive}>Delete</button>\r\n                    </div>\r\n                    <div>\r\n                        <div>name: {props.contact.name}</div>\r\n                        <div>email: {props.contact.email}</div>\r\n                        <div>phone: {props.contact.phone}</div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact;","import React, {useState} from \"react\";\r\nimport Contact from \"./Contact/Contact\";\r\nimport style from \"./Contacts.module.css\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst Contacts = (props) => {\r\n\r\n    const [searchMode, setSearchMode] = useState(false);\r\n    const [contactsForShow, setContactsForShow] = useState(props.contacts);\r\n\r\n    if (contactsForShow.length !== props.contacts.length && !searchMode) {\r\n        setContactsForShow(props.contacts);\r\n    }\r\n\r\n    const deleteSearchContact = (contactId) => {\r\n        if(searchMode) {\r\n            setContactsForShow(contactsForShow.filter(contact => contact.id !== contactId));\r\n        }\r\n    }\r\n\r\n    const findContacts = (event) => {\r\n        let searchText = event.target.value;\r\n        if (searchText) {\r\n            setContactsForShow(props.contacts.filter(contact => contact.name.toLowerCase().includes(searchText.toLowerCase())));\r\n            setSearchMode(true);\r\n        } else {\r\n            setContactsForShow(props.contacts);\r\n            setSearchMode(false);\r\n        }\r\n    }\r\n\r\n    if (!props.isAuth){\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Contacts:</h3>\r\n            <div><input disabled={props.buttonActive} onChange={event => findContacts(event)} type=\"text\"/>search</div>\r\n            <button onClick={props.addContact} disabled={props.buttonActive || searchMode}>Add contact</button>\r\n            <div className={style.contacts}>\r\n                {!contactsForShow.length && searchMode\r\n                    ? <div>Contacts not found</div>\r\n                    : contactsForShow.map(contact => <Contact contact={contact}\r\n                                                              key={contact.id}\r\n                                                              deleteContact={props.deleteContact}\r\n                                                              editContact={props.editContact}\r\n                                                              buttonActive={props.buttonActive}\r\n                                                              changeButtonsState={props.changeButtonsState}\r\n                                                              deleteSearchContact={deleteSearchContact}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contacts;","import {connect} from \"react-redux\";\r\nimport {addContact, changeButtonsState, deleteContact, editContact} from \"../../redux/contacts-reducer\";\r\nimport React from \"react\";\r\nimport Contacts from \"./Contacts\";\r\n\r\nconst ContactsContainer = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <Contacts contacts={props.contacts}\r\n                      addContact={props.addContact}\r\n                      deleteContact={props.deleteContact}\r\n                      editContact={props.editContact}\r\n                      buttonActive={props.buttonActive}\r\n                      changeButtonsState={props.changeButtonsState}\r\n                      isAuth={props.isAuth}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    contacts: state.contactsPage.contacts,\r\n    buttonActive: state.contactsPage.buttonActive,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n    addContact,\r\n    editContact,\r\n    deleteContact,\r\n    changeButtonsState,\r\n})(ContactsContainer);","import React from \"react\";\r\nimport style from \"./Header.module.css\"\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className={style.header}>\r\n            <div className={style.logo}>Personal Area</div>\r\n            <div className={style.loginBlock}>\r\n                {props.isAuth ? <button onClick={props.logout}>logout</button> : null}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import Header from \"./Header\";\r\nimport React from \"react\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst HeaderContainer = (props) => {\r\n    return (\r\n        <div>\r\n            <Header isAuth={props.isAuth} logout={props.logout}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);","import React, {Component} from 'react';\nimport './App.css'\nimport Login from \"./components/Login/Login\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport ContactsContainer from \"./components/Contacts/ContactsContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\n\nclass App extends Component {\n\n    render () {\n        return (\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <div className=\"app-wrapper-content\">\n                    <Switch>\n                        <Route path='/contacts' render={() => <ContactsContainer/>}/>\n                        <Route path='/login' render={() => <Login/>}/>\n                        <Redirect from = '/' to = '/contacts'/>\n                    </Switch>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport contactsReducer from \"./contacts-reducer\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n    contactsPage: contactsReducer,\r\n    auth: authReducer,\r\n    form: formReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nlet store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nlet rerenderEntireTree = () => {\n    ReactDOM.render(\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>, document.getElementById('root')\n    );\n}\n\nrerenderEntireTree();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__9Gvmm\",\"logo\":\"Header_logo__3OnwY\",\"loginBlock\":\"Header_loginBlock__2f-0t\"};"],"sourceRoot":""}