{"version":3,"sources":["components/Header/Header.js","components/Login/Login.js","redux/contacts-reducer.js","components/Contacts/Contact/ContactForm.js","components/Contacts/Contact/Contact.js","components/Contacts/Contacts.js","components/Contacts/ContactsContainer.js","App.js","serviceWorker.js","redux/store.js","index.js","components/Header/Header.module.css","components/Contacts/Contacts.module.css"],"names":["Header","className","style","header","logo","loginBlock","LoginReduxForm","reduxForm","form","props","onSubmit","handleSubmit","Field","placeholder","name","component","Login","formData","console","log","initialState","contacts","id","email","phone","buttonActive","contactsReducer","state","action","type","newContact","length","map","contact","contactId","contactData","filter","active","ContactReduxForm","required","Contact","useState","editMode","setEditMode","initialValues","editContact","onClick","changeButtonsState","disabled","deleteContact","Contacts","addContact","key","connect","contactsPage","App","path","render","from","to","Component","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.691f357e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport style from \"./Header.module.css\"\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className={style.header}>\r\n            <div className={style.logo}>Personal Area</div>\r\n            <div className={style.loginBlock}>Profile Name</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\n\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Login\"} name={\"login\"} component={\"input\"}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"password\"} name={\"password\"} component={\"input\"}/>\r\n            </div>\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm);\r\n\r\nconst Login = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        console.log(formData)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","const ADD_CONTACT = 'ADD-CONTACT';\r\nconst DELETE_CONTACT = 'DELETE-CONTACT';\r\nconst EDIT_CONTACT = 'EDIT-CONTACT';\r\nconst CHANGE_BUTTONS_STATE = 'CHANGE_BUTTONS_STATE';\r\n\r\nlet initialState = {\r\n    contacts: [\r\n        {id: 1, name: 'Cartman', email: 'cartman@gmail.com', phone: '01' },\r\n        {id: 2, name: 'Stan', email: 'stan@gmail.com', phone: '02'},\r\n        {id: 3, name: 'Kyle', email: 'kyle@gmail.com', phone: '03'},\r\n        {id: 4, name: 'Kenny', email: 'kenny@gmail.com', phone: '04'},\r\n        {id: 5, name: 'Batters', email: 'batters@gmail.com', phone: '05'}\r\n    ],\r\n    buttonActive: false\r\n}\r\n\r\nconst contactsReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_CONTACT: {\r\n            let newContact = {\r\n                id: state.contacts.length ? state.contacts[state.contacts.length-1].id+1 : 1,\r\n                name: \"\",\r\n                email: \"\",\r\n                phone: \"\"\r\n            };\r\n            state.buttonActive = true;\r\n            return {\r\n                ...state, contacts: [...state.contacts, newContact]\r\n            }\r\n        }\r\n        case EDIT_CONTACT: {\r\n            state.buttonActive = false;\r\n            return {\r\n                ...state, contacts: state.contacts.map(function (contact) {\r\n                    if (contact.id === action.contactId) {\r\n                        contact.name = action.contactData.name;\r\n                        contact.email = action.contactData.email;\r\n                        contact.phone = action.contactData.phone;\r\n                    }\r\n                    return contact;\r\n                })\r\n            }\r\n        }\r\n        case DELETE_CONTACT: {\r\n            state.buttonActive = false;\r\n            return {...state, contacts: state.contacts.filter(contact => contact.id !== action.contactId)}\r\n        }\r\n        case CHANGE_BUTTONS_STATE: {\r\n            return {...state, buttonActive: action.active}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addContact = () => ({type: ADD_CONTACT});\r\nexport const editContact = (contactData, contactId) => ({type: EDIT_CONTACT, contactData, contactId});\r\nexport const deleteContact = (contactId) => ({type: DELETE_CONTACT, contactId});\r\nexport const changeButtonsState = (active) => ({type: CHANGE_BUTTONS_STATE, active});\r\n\r\nexport default contactsReducer;","import {Field, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\n\r\nconst ContactForm = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n            <div>\r\n                <Field required={true} placeholder={\"name\"} name={\"name\"} component={\"input\"}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"email\"} name={\"email\"} component={\"input\"}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"phone\"} name={\"phone\"} component={\"input\"}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ContactReduxForm = reduxForm({form: \"contact\"})(ContactForm);\r\n\r\nexport default ContactReduxForm;","import React, {useState} from \"react\";\r\nimport ContactReduxForm from \"./ContactForm\";\r\n\r\nconst Contact = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    const onSubmit = (formData) => {\r\n        console.log(formData);\r\n        props.editContact(formData, props.contact.id);\r\n        setEditMode(false);\r\n    }\r\n\r\n    const deleteContact = () => {\r\n        props.deleteContact(props.contact.id);\r\n    }\r\n\r\n    const goToEditMode = () => {\r\n        setEditMode(true);\r\n        props.changeButtonsState(true);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode || !props.contact.name\r\n                ? <div>\r\n                    <ContactReduxForm initialValues={props.contact}\r\n                                      onSubmit={onSubmit}\r\n                                      contactId={props.contact.id}/>\r\n                </div>\r\n                : <div>\r\n                    <div>\r\n                        <button onClick={goToEditMode} disabled={props.buttonActive}>Edit</button>\r\n                        <button onClick={deleteContact} disabled={props.buttonActive}>Delete</button>\r\n                    </div>\r\n                    <div>\r\n                        <div>name: {props.contact.name}</div>\r\n                        <div>email: {props.contact.email}</div>\r\n                        <div>phone: {props.contact.phone}</div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact;","import React, {useState} from \"react\";\r\nimport Contact from \"./Contact/Contact\";\r\nimport style from \"./Contacts.module.css\";\r\n\r\nconst Contacts = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <h3>Contacts:</h3>\r\n            <button onClick={props.addContact} disabled={props.buttonActive}>Add contact</button>\r\n            <div className={style.contacts}>\r\n                {\r\n                    props.contacts.map(contact => <Contact contact={contact}\r\n                                                           key={contact.id}\r\n                                                           deleteContact={props.deleteContact}\r\n                                                           editContact={props.editContact}\r\n                                                           buttonActive={props.buttonActive}\r\n                                                           changeButtonsState={props.changeButtonsState}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contacts;","import {connect} from \"react-redux\";\r\nimport {addContact, changeButtonsState, deleteContact, editContact} from \"../../redux/contacts-reducer\";\r\nimport React from \"react\";\r\nimport Contacts from \"./Contacts\";\r\n\r\nconst ContactsContainer = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <Contacts contacts={props.contacts}\r\n                      addContact={props.addContact}\r\n                      deleteContact={props.deleteContact}\r\n                      editContact={props.editContact}\r\n                      buttonActive={props.buttonActive}\r\n                      changeButtonsState={props.changeButtonsState}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    contacts: state.contactsPage.contacts,\r\n    buttonActive: state.contactsPage.buttonActive,\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n    addContact,\r\n    editContact,\r\n    deleteContact,\r\n    changeButtonsState\r\n})(ContactsContainer);","import React, {Component} from 'react';\nimport Header from \"./components/Header/Header\";\nimport './App.css'\nimport Login from \"./components/Login/Login\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport ContactsContainer from \"./components/Contacts/ContactsContainer\";\n\nclass App extends Component {\n\n    render () {\n        return (\n            <div className=\"app-wrapper\">\n                <Header/>\n                <div className=\"app-wrapper-content\">\n                    <Switch>\n                        <Route path='/contacts' render={() => <ContactsContainer/>}/>\n                        <Route path='/login' render={() => <Login/>}/>\n                        <Redirect from = '/' to = '/contacts'/>\n                    </Switch>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport contactsReducer from \"./contacts-reducer\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\n\r\nlet reducers = combineReducers({\r\n    contactsPage: contactsReducer,\r\n    form: formReducer\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nlet rerenderEntireTree = () => {\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>, document.getElementById('root')\n    );\n}\n\nrerenderEntireTree();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__9Gvmm\",\"logo\":\"Header_logo__3OnwY\",\"loginBlock\":\"Header_loginBlock__2f-0t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"Contacts_contacts__ZDtBB\"};"],"sourceRoot":""}